{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/TodoList.js","App.js","index.js"],"names":["TodoForm","props","useState","edit","value","input","setInput","inputRef","useRef","useEffect","current","focus","handleChange","e","target","className","onSubmit","preventDefault","id","Math","floor","random","text","type","placeholder","name","onChange","ref","Todo","todos","completeTodo","removeTodo","updateTodo","setEdit","map","todo","index","isComplete","onClick","TodoList","setTodos","test","newTodos","updatedTodos","removeArr","filter","todoId","newValue","prev","item","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oNA8DeA,MA5Df,SAAkBC,GAAQ,IAAD,EAEKC,mBAASD,EAAME,KAAOF,EAAME,KAAKC,MAAQ,IAF9C,mBAEdC,EAFc,KAEPC,EAFO,KAIfC,EAAWC,iBAAO,MAExBC,qBAAU,WACNF,EAASG,QAAQC,WAGrB,IAAMC,EAAe,SAAAC,GACjBP,EAASO,EAAEC,OAAOV,QAatB,OACI,sBAAMW,UAAU,YAAYC,SAXX,SAAAH,GACjBA,EAAEI,iBAEFhB,EAAMe,SAAS,CACXE,GAAIC,KAAKC,MAAsB,IAAhBD,KAAKE,UACpBC,KAAMjB,IAEVC,EAAS,KAIT,SACKL,EAAME,KACP,qCACI,uBACIoB,KAAK,OACLC,YAAY,mBACZpB,MAAOC,EACPoB,KAAK,OACLV,UAAU,kBACVW,SAAUd,EACVe,IAAKpB,IAET,wBAAQQ,UAAU,mBAAlB,uBAIJ,qCACI,uBACIQ,KAAK,OACLC,YAAY,aACZpB,MAAOC,EACPoB,KAAK,OACLV,UAAU,aACVW,SAAUd,EACVe,IAAKpB,IAET,wBAAQQ,UAAU,cAAlB,4B,eCfDa,MAhCf,YAA8D,IAA/CC,EAA8C,EAA9CA,MAAOC,EAAuC,EAAvCA,aAAcC,EAAyB,EAAzBA,WAAYC,EAAa,EAAbA,WAAa,EAEjC9B,mBAAS,CAC7BgB,GAAI,KACJd,MAAO,KAJ8C,mBAElDD,EAFkD,KAE5C8B,EAF4C,KAezD,OAAI9B,EAAKe,GACE,cAAC,EAAD,CAAUf,KAAMA,EAAMa,SATZ,SAAAZ,GACjB4B,EAAW7B,EAAKe,GAAId,GACpB6B,EAAQ,CACJf,GAAI,KACJd,MAAO,QAQRyB,EAAMK,KAAI,SAACC,EAAMC,GAAP,OACb,sBAAKrB,UAAWoB,EAAKE,WAAa,oBAAsB,WAAxD,UACI,qBAAmBC,QAAS,kBAAMR,EAAaK,EAAKjB,KAApD,SACKiB,EAAKb,MADAa,EAAKjB,IAGf,sBAAKH,UAAU,QAAf,UACI,cAAC,IAAD,CAAmBuB,QAAS,kBAAMP,EAAWI,EAAKjB,KAAKH,UAAU,gBACjE,cAAC,IAAD,CAAQuB,QAAS,kBAAML,EAAQ,CAACf,GAAIiB,EAAKjB,GAAId,MAAO+B,EAAKb,QAAQP,UAAU,mBANVqB,OCsBlEG,MA5Cf,WAAqB,IAAD,EAEUrC,mBAAS,IAFnB,mBAET2B,EAFS,KAEFW,EAFE,KAmChB,OACI,gCACI,4DACA,cAAC,EAAD,CAAUxB,SAlCF,SAAAmB,GACZ,GAAKA,EAAKb,OAAQ,QAAQmB,KAAKN,EAAKb,MAApC,CAIA,IAAMoB,EAAQ,CAAIP,GAAJ,mBAAaN,IAC3BW,EAASE,OA6BL,cAAC,EAAD,CAAMb,MAAOA,EAAOC,aAdP,SAAAZ,GACjB,IAAIyB,EAAed,EAAMK,KAAI,SAAAC,GAIzB,OAHIA,EAAKjB,KAAOA,IACZiB,EAAKE,YAAcF,EAAKE,YAErBF,KAEXK,EAASG,IAO2CZ,WA1BrC,SAAAb,GACf,IAAM0B,EAAY,YAAIf,GAAOgB,QAAO,SAAAV,GAAI,OAAIA,EAAKjB,KAAOA,KACxDsB,EAASI,IAwBmEZ,WArB7D,SAACc,EAAQC,GACnBA,EAASzB,OAAQ,QAAQmB,KAAKM,EAASzB,OAG5CkB,GAAS,SAAAQ,GAAI,OAAIA,EAAKd,KAAI,SAAAe,GAAI,OAAKA,EAAK/B,KAAO4B,EAASC,EAAWE,eCd5DC,MARf,WACE,OACE,qBAAKnC,UAAU,WAAf,SACE,cAAC,EAAD,OCFNoC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.2a58f2d4.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\n\nfunction TodoForm(props) {\n\n    const [input, setInput] = useState(props.edit ? props.edit.value : '');\n\n    const inputRef = useRef(null);\n\n    useEffect(() => {\n        inputRef.current.focus();\n    });\n\n    const handleChange = e => {\n        setInput(e.target.value);\n    };\n\n    const handleSubmit = e => {\n        e.preventDefault();\n\n        props.onSubmit({\n            id: Math.floor(Math.random() * 10000),\n            text: input\n        });\n        setInput('');\n    };\n\n    return (\n        <form className=\"todo-form\" onSubmit={handleSubmit}>\n            {props.edit ? (\n            <>\n                <input \n                    type=\"text\" \n                    placeholder=\"Update your item\" \n                    value={input} \n                    name=\"text\" \n                    className=\"todo-input edit\" \n                    onChange={handleChange} \n                    ref={inputRef}\n                />\n                <button className=\"todo-button edit\">Update</button>\n            </>\n            ) :\n            (\n            <>\n                <input \n                    type=\"text\" \n                    placeholder=\"Add a todo\" \n                    value={input} \n                    name=\"text\" \n                    className=\"todo-input\" \n                    onChange={handleChange} \n                    ref={inputRef}\n                />\n                <button className=\"todo-button\">Add todo</button>\n            </>\n            )\n            }\n            \n        </form>\n    );\n}\n\nexport default TodoForm;\n","import React, { useState } from 'react';\nimport { RiCloseCircleLine } from 'react-icons/ri';\nimport { TiEdit } from 'react-icons/ti';\nimport TodoForm from './TodoForm';\nimport TodoList from './TodoList';\n\nfunction Todo({todos, completeTodo, removeTodo, updateTodo}) {\n\n    const [edit, setEdit] = useState({\n        id: null,\n        value: ''\n    });\n\n    const submitUpdate = value => {\n        updateTodo(edit.id, value);\n        setEdit({\n            id: null,\n            value: ''\n        });\n    };\n\n    if (edit.id) {\n        return <TodoForm edit={edit} onSubmit={submitUpdate} />\n    }\n\n    return todos.map((todo, index) => (\n        <div className={todo.isComplete ? 'todo-row complete' : 'todo-row'} key={index}>\n            <div key={todo.id} onClick={() => completeTodo(todo.id)}>\n                {todo.text}\n            </div>\n            <div className=\"icons\">\n                <RiCloseCircleLine onClick={() => removeTodo(todo.id)} className='delete-icon' />\n                <TiEdit onClick={() => setEdit({id: todo.id, value: todo.text})} className='edit-icon' />\n            </div>\n        </div>\n    ));\n}\n\nexport default Todo;\n","import React, { useState } from 'react';\nimport TodoForm from './TodoForm';\nimport Todo from './Todo';\n\nfunction TodoList() {\n\n    const [todos, setTodos] = useState([]);\n\n    const addTodo = todo => {\n        if (!todo.text || /^\\s*$/.test(todo.text)) {\n            return \n        }\n\n        const newTodos = [todo, ...todos];\n        setTodos(newTodos);\n    };\n\n    const removeTodo = id => {\n        const removeArr = [...todos].filter(todo => todo.id !== id);\n        setTodos(removeArr);\n    };\n\n    const updateTodo = (todoId, newValue) => {\n        if (!newValue.text || /^\\s*$/.test(newValue.text)) {\n            return \n        }\n        setTodos(prev => prev.map(item => (item.id === todoId ? newValue : item)));\n    };\n\n    const completeTodo = id => {\n        let updatedTodos = todos.map(todo => {\n            if (todo.id === id) {\n                todo.isComplete = !todo.isComplete;\n            }\n            return todo;\n        })\n        setTodos(updatedTodos);\n    };\n\n    return (\n        <div>\n            <h1>What's the Plan for Today?</h1>\n            <TodoForm onSubmit={addTodo} />\n            <Todo todos={todos} completeTodo={completeTodo} removeTodo={removeTodo} updateTodo={updateTodo} />\n        </div>\n    );\n}\n\nexport default TodoList;\n","import React from 'react';\nimport './App.css';\nimport TodoList from './components/TodoList';\n\nfunction App() {\n  return (\n    <div className=\"todo-app\">\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}